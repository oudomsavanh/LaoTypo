// üìö Firestore Game Data Manager
// Manages loading game words from Firestore

class FirestoreGameDataManager {
    constructor() {
        this.db = null;
        this.collection = 'gameWords';
        this.cache = new Map();
        this.cacheExpiry = 5 * 60 * 1000; // 5 minutes
    }

    // Initialize the manager
    async initialize() {
        if (window.firebaseDb) {
            this.db = window.firebaseDb;
            console.log('‚úÖ FirestoreGameDataManager initialized with Firebase');
            return true;
        } else {
            console.warn('‚ö†Ô∏è Firebase not available, using fallback data');
            return false;
        }
    }

    // Load words from Firestore
    async loadWords(limit = 100) {
        try {
            // Check if we have a valid cache
            const cacheKey = `words_${limit}`;
            const cached = this.cache.get(cacheKey);
            if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
                console.log('üìö Using cached words:', cached.data.length);
                return cached.data;
            }

            // Try to load from Firestore
            if (this.db) {
                console.log('üìö Loading words from Firestore...');
                const snapshot = await this.db.collection(this.collection)
                    .orderBy('createdAt', 'desc')
                    .limit(limit)
                    .get();

                if (!snapshot.empty) {
                    const words = snapshot.docs.map(doc => {
                        const data = doc.data() || {};

                        const rawDifficulty = data.difficulty;
                        const numericDifficulty = typeof rawDifficulty === 'number'
                            ? rawDifficulty
                            : parseInt(rawDifficulty, 10);

                        return {
                            context: data.context || '',
                            correct: data.correct || '',
                            incorrect: data.wrong ?? data.incorrect ?? '',
                            difficulty: Number.isFinite(numericDifficulty) ? numericDifficulty : 1
                        };
                    }).filter(word => word.context && word.correct && word.incorrect);

                    if (words.length > 0) {
                        // Cache the results
                        this.cache.set(cacheKey, {
                            data: words,
                            timestamp: Date.now()
                        });

                        console.log('‚úÖ Loaded', words.length, 'words from Firestore');
                        return words;
                    }
                    console.warn('‚ö†Ô∏è No valid words found in Firestore response, falling back to defaults');
                }
            }

            // Fallback to default words if Firestore fails
            console.log('üìö Using fallback words');
            return this.getFallbackWords(limit);

        } catch (error) {
            console.error('‚ùå Error loading words from Firestore:', error);
            console.log('üìö Falling back to default words');
            return this.getFallbackWords(limit);
        }
    }

    // Get fallback words when Firestore is not available
    getFallbackWords(limit = 100) {
        const fallbackWords = [
            { context: '‡∫Ñ‡∫≥‡∫ó‡∫±‡∫Å‡∫ó‡∫≤‡∫ç', correct: '‡∫™‡∫∞‡∫ö‡∫≤‡∫ç‡∫î‡∫µ', incorrect: '‡∫™‡∫∞‡∫ö‡∫≤‡∫ç‡∫î‡∫¥', difficulty: 1 },
            { context: '‡∫Ñ‡∫≥‡∫Ç‡∫≠‡∫ö‡ªÉ‡∫à', correct: '‡∫Ç‡∫≠‡∫ö‡ªÉ‡∫à', incorrect: '‡∫Ç‡∫≠‡∫ö‡ªÉ‡ªà', difficulty: 1 },
            { context: '‡∫Ñ‡∫≥‡∫•‡∫≤', correct: '‡∫•‡∫≤‡∫Å‡ªà‡∫≠‡∫ô', incorrect: '‡∫•‡∫≤‡∫Å‡ªà‡∫ô', difficulty: 1 },
            { context: '‡∫Ñ‡∫≥‡∫Ç‡ªç‡ªÇ‡∫ó‡∫î', correct: '‡∫Ç‡ªç‡ªÇ‡∫ó‡∫î', incorrect: '‡∫Ç‡ªç‡ªÇ‡∫ñ‡∫î', difficulty: 1 },
            { context: '‡∫Å‡∫≤‡∫ô‡ªÅ‡∫ô‡∫∞‡∫ô‡∫≥‡∫ï‡∫ª‡∫ô', correct: '‡∫ä‡∫∑‡ªà', incorrect: '‡∫ä‡∫∂‡ªà', difficulty: 1 },
            { context: '‡∫Å‡∫≤‡∫ô‡ªÅ‡∫ô‡∫∞‡∫ô‡∫≥‡∫ï‡∫ª‡∫ô', correct: '‡∫≠‡∫≤‡∫ç‡∫∏', incorrect: '‡∫≠‡∫≤‡∫ç‡∫π', difficulty: 1 },
            { context: '‡∫™‡∫∞‡∫°‡∫≤‡∫ä‡∫¥‡∫Å‡∫Ñ‡∫≠‡∫ö‡∫Ñ‡∫ª‡∫ß', correct: '‡∫Ñ‡∫≠‡∫ö‡∫Ñ‡∫ª‡∫ß', incorrect: '‡∫Ñ‡∫≠‡∫ö‡∫Ñ‡∫ª‡∫ª‡∫ß', difficulty: 1 },
            { context: '‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫ó‡∫µ‡ªà‡∫¢‡∫π‡ªà', correct: '‡∫ö‡ªâ‡∫≤‡∫ô', incorrect: '‡∫ö‡ªâ‡∫≤‡∫ô‡∫ô', difficulty: 1 },
            { context: '‡∫≠‡∫≤‡∫´‡∫≤‡∫ô‡∫û‡∫∑‡ªâ‡∫ô‡∫ñ‡∫≤‡∫ô', correct: '‡∫≠‡∫≤‡∫´‡∫≤‡∫ô', incorrect: '‡∫≠‡∫≤‡∫´‡∫≤‡∫ô‡∫ô', difficulty: 1 },
            { context: '‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫î‡∫∑‡ªà‡∫°‡∫à‡∫≥‡ªÄ‡∫õ‡∫±‡∫ô', correct: '‡∫ô‡ªâ‡∫≥', incorrect: '‡∫ô‡ªâ‡∫≥‡∫≥', difficulty: 1 },
            { context: '‡∫≠‡∫≤‡∫´‡∫≤‡∫ô‡∫û‡∫∑‡ªâ‡∫ô‡∫ñ‡∫≤‡∫ô', correct: '‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤', incorrect: '‡ªÄ‡∫Ç‡∫ª‡ªâ‡ªâ‡∫≤', difficulty: 1 },
            { context: '‡∫≠‡∫≤‡∫´‡∫≤‡∫ô‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫™‡∫∏‡∫Ç‡∫∞‡∫û‡∫≤‡∫ö', correct: '‡∫ú‡∫±‡∫Å', incorrect: '‡∫ú‡∫±‡∫±‡∫Å', difficulty: 2 },
            { context: '‡∫≠‡∫≤‡∫´‡∫≤‡∫ô‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫Ñ‡∫ß‡∫≤‡∫°‡∫´‡∫ß‡∫≤‡∫ô', correct: '‡ªù‡∫≤‡∫Å‡ªÑ‡∫°‡ªâ', incorrect: '‡ªù‡∫≤‡∫Å‡ªÑ‡ªù‡ªâ', difficulty: 2 },
            { context: '‡∫Å‡∫≤‡∫ô‡ªÄ‡∫î‡∫µ‡∫ô‡∫ó‡∫≤‡∫á', correct: '‡∫•‡∫ª‡∫î', incorrect: '‡∫•‡∫ª‡∫ª‡∫î', difficulty: 1 },
            { context: '‡∫û‡∫≤‡∫´‡∫∞‡∫ô‡∫∞‡∫™‡ªà‡∫ß‡∫ô‡∫ö‡∫∏‡∫Å‡∫Ñ‡∫ª‡∫ô', correct: '‡∫•‡∫ª‡∫î‡∫à‡∫±‡∫Å', incorrect: '‡∫•‡∫ª‡∫î‡∫à‡∫±‡∫±‡∫Å', difficulty: 2 },
            { context: '‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫™‡∫∂‡∫Å‡∫™‡∫≤', correct: '‡ªÇ‡∫Æ‡∫á‡∫Æ‡∫Ω‡∫ô', incorrect: '‡ªÇ‡∫Æ‡∫á‡∫Æ‡∫Ω‡∫ô‡∫ô', difficulty: 2 },
            { context: '‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Æ‡∫±‡∫î‡∫ß‡∫Ω‡∫Å', correct: '‡∫ß‡∫Ω‡∫Å', incorrect: '‡∫ß‡∫Ω‡∫±‡∫Å', difficulty: 1 },
            { context: '‡∫≠‡∫≤‡∫ä‡∫µ‡∫ö‡∫Ñ‡∫π', correct: '‡∫Ñ‡∫π', incorrect: '‡∫Ñ‡∫ª‡∫π', difficulty: 1 },
            { context: '‡∫ú‡∫π‡ªâ‡∫Æ‡∫Ω‡∫ô', correct: '‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô', incorrect: '‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô‡∫ô', difficulty: 1 },
            { context: '‡ªÄ‡∫ß‡∫•‡∫≤‡ªÄ‡∫ä‡∫ª‡ªâ‡∫≤', correct: '‡ªÄ‡∫ä‡∫ª‡ªâ‡∫≤', incorrect: '‡ªÄ‡∫ä‡∫ª‡ªâ‡∫≤‡ªâ', difficulty: 1 },
            { context: '‡ªÄ‡∫ß‡∫•‡∫≤‡∫Å‡∫≤‡∫á‡∫Ñ‡∫∑‡∫ô', correct: '‡∫Ñ‡∫∑‡∫ô', incorrect: '‡∫Ñ‡∫∑‡∫ô‡∫ô', difficulty: 1 },
            { context: '‡∫≠‡∫≤‡∫Å‡∫≤‡∫î‡∫ù‡∫ª‡∫ô', correct: '‡∫ù‡∫ª‡∫ô', incorrect: '‡∫ù‡∫ª‡∫ô‡∫ô', difficulty: 1 },
            { context: '‡∫≠‡∫≤‡∫Å‡∫≤‡∫î‡∫Æ‡ªâ‡∫≠‡∫ô', correct: '‡∫Æ‡ªâ‡∫≠‡∫ô', incorrect: '‡∫Æ‡ªâ‡∫≠‡∫ô‡∫ô', difficulty: 1 },
            { context: '‡∫≠‡∫≤‡∫Å‡∫≤‡∫î‡ªÄ‡∫¢‡∫±‡∫ô', correct: '‡ªÄ‡∫¢‡∫±‡∫ô', incorrect: '‡ªÄ‡∫¢‡∫±‡∫ô‡∫ô', difficulty: 1 },
            { context: '‡∫™‡∫µ‡∫û‡∫∑‡ªâ‡∫ô‡∫ñ‡∫≤‡∫ô', correct: '‡ªÅ‡∫î‡∫á', incorrect: '‡ªÅ‡∫î‡∫á‡∫á', difficulty: 1 },
            { context: '‡∫™‡∫µ‡∫û‡∫∑‡ªâ‡∫ô‡∫ñ‡∫≤‡∫ô', correct: '‡∫Ç‡∫Ω‡∫ß', incorrect: '‡∫Ç‡∫Ω‡∫ß‡∫ß', difficulty: 1 },
            { context: '‡∫™‡∫µ‡∫û‡∫∑‡ªâ‡∫ô‡∫ñ‡∫≤‡∫ô', correct: '‡∫ü‡ªâ‡∫≤', incorrect: '‡∫ü‡ªâ‡∫≤‡∫≤', difficulty: 1 },
            { context: '‡∫™‡∫µ‡∫û‡∫∑‡ªâ‡∫ô‡∫ñ‡∫≤‡∫ô', correct: '‡ªÄ‡∫´‡∫º‡∫∑‡∫≠‡∫á', incorrect: '‡ªÄ‡∫´‡∫º‡∫∑‡∫≠‡∫á‡∫á', difficulty: 1 },
            { context: '‡∫™‡∫µ‡∫û‡∫∑‡ªâ‡∫ô‡∫ñ‡∫≤‡∫ô', correct: '‡∫î‡∫≥', incorrect: '‡∫î‡∫≥‡∫≥', difficulty: 1 },
            { context: '‡∫™‡∫µ‡∫û‡∫∑‡ªâ‡∫ô‡∫ñ‡∫≤‡∫ô', correct: '‡∫Ç‡∫≤‡∫ß', incorrect: '‡∫Ç‡∫≤‡∫ß‡∫ß', difficulty: 1 },
            { context: '‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫õ‡∫∞‡ªÄ‡∫ó‡∫î', correct: '‡∫õ‡∫∞‡ªÄ‡∫ó‡∫î‡∫•‡∫≤‡∫ß', incorrect: '‡∫õ‡∫∞‡ªÄ‡∫ó‡∫î‡∫•‡∫≤‡∫ß‡∫ß', difficulty: 2 },
            { context: '‡∫û‡∫≤‡∫™‡∫≤‡∫ó‡ªâ‡∫≠‡∫á‡∫ñ‡∫¥‡ªà‡∫ô', correct: '‡∫û‡∫≤‡∫™‡∫≤‡∫•‡∫≤‡∫ß', incorrect: '‡∫û‡∫≤‡∫™‡∫≤‡∫•‡∫≤‡∫ß‡∫ß', difficulty: 2 },
            { context: '‡∫Ñ‡∫ß‡∫≤‡∫°‡∫Æ‡∫π‡ªâ‡∫î‡ªâ‡∫≤‡∫ô‡ªÄ‡∫ï‡∫±‡∫Å‡ªÇ‡∫ô‡ªÇ‡∫•‡∫ä‡∫µ', correct: '‡ªÄ‡∫ï‡∫±‡∫Å‡ªÇ‡∫ô‡ªÇ‡∫•‡∫ä‡∫µ', incorrect: '‡ªÄ‡∫ï‡∫±‡∫Å‡ªÇ‡∫ô‡ªÇ‡∫•‡∫ä‡∫¥', difficulty: 3 },
            { context: '‡∫Ñ‡∫ß‡∫≤‡∫°‡∫Æ‡∫π‡ªâ‡∫î‡ªâ‡∫≤‡∫ô‡∫ß‡∫¥‡∫ó‡∫∞‡∫ç‡∫≤‡∫™‡∫≤‡∫î', correct: '‡∫ß‡∫¥‡∫ó‡∫∞‡∫ç‡∫≤‡∫™‡∫≤‡∫î', incorrect: '‡∫ß‡∫¥‡∫ó‡∫∞‡∫ç‡∫≤‡∫™‡∫≤‡∫î‡∫î', difficulty: 3 },
            { context: '‡∫ó‡∫≥‡∫°‡∫∞‡∫ä‡∫≤‡∫î', correct: '‡∫™‡∫±‡∫î', incorrect: '‡∫™‡∫±‡∫±‡∫î', difficulty: 1 },
            { context: '‡∫ó‡ªâ‡∫≠‡∫á‡∫ü‡ªâ‡∫≤', correct: '‡∫ó‡ªâ‡∫≠‡∫á‡∫ü‡ªâ‡∫≤', incorrect: '‡∫ó‡ªâ‡∫≠‡∫á‡∫ü‡ªâ‡∫≤‡∫≤', difficulty: 1 },
            { context: '‡∫û‡∫∑‡ªâ‡∫ô‡∫î‡∫¥‡∫ô', correct: '‡∫î‡∫¥‡∫ô', incorrect: '‡∫î‡∫¥‡∫ô‡∫ô', difficulty: 1 },
            { context: '‡∫î‡∫≠‡∫Å‡ªÑ‡∫°‡ªâ', correct: '‡∫î‡∫≠‡∫Å‡ªÑ‡∫°‡ªâ', incorrect: '‡∫î‡∫≠‡∫Å‡ªÑ‡ªù‡ªâ', difficulty: 2 },
            { context: '‡∫ï‡∫ª‡ªâ‡∫ô‡ªÑ‡∫°‡ªâ', correct: '‡∫ï‡∫ª‡ªâ‡∫ô‡ªÑ‡∫°‡ªâ', incorrect: '‡∫ï‡∫ª‡ªâ‡∫ô‡ªÑ‡ªù‡ªâ', difficulty: 1 },
            { context: '‡∫Å‡∫≤‡∫ô‡∫Æ‡∫Ω‡∫ô‡∫Æ‡∫π‡ªâ', correct: '‡∫Æ‡∫Ω‡∫ô', incorrect: '‡∫Æ‡∫Ω‡∫ô‡∫ô', difficulty: 1 },
            { context: '‡∫õ‡∫∂‡ªâ‡∫°‡∫Æ‡∫Ω‡∫ô', correct: '‡∫õ‡∫∂‡ªâ‡∫°', incorrect: '‡∫õ‡∫∂‡ªâ‡∫°‡∫°', difficulty: 1 },
            { context: '‡ªÄ‡∫ß‡∫•‡∫≤‡∫Å‡∫≤‡∫á‡∫ß‡∫±‡∫ô', correct: '‡∫ß‡∫±‡∫ô', incorrect: '‡∫ß‡∫±‡∫ô‡∫ô', difficulty: 1 },
            { context: '‡ªÅ‡∫™‡∫á‡∫™‡∫∞‡∫´‡∫ß‡ªà‡∫≤‡∫á', correct: '‡ªÅ‡∫™‡∫á', incorrect: '‡ªÅ‡∫™‡∫á‡∫á', difficulty: 2 },
            { context: '‡∫Ñ‡∫ß‡∫≤‡∫°‡∫°‡∫∑‡∫î', correct: '‡∫°‡∫∑‡∫î', incorrect: '‡∫°‡∫∑‡∫î‡∫î', difficulty: 1 },
            { context: '‡∫Å‡∫∞‡ªÅ‡∫™‡∫•‡∫ª‡∫°', correct: '‡∫•‡∫ª‡∫°', incorrect: '‡∫•‡∫ª‡∫°‡∫°', difficulty: 1 },
            { context: '‡ªÅ‡∫™‡∫á‡ªÅ‡∫î‡∫î', correct: '‡ªÅ‡∫î‡∫î', incorrect: '‡ªÅ‡∫î‡∫î‡∫î', difficulty: 1 },
            { context: '‡∫õ‡∫≤‡∫ç‡∫ü‡ªâ‡∫≤', correct: '‡∫ü‡ªâ‡∫≤‡∫ú‡ªà‡∫≤', incorrect: '‡∫ü‡ªâ‡∫≤‡∫ú‡ªà‡∫≤‡∫≤', difficulty: 3 }
        ];

        // Return limited number of words
        return fallbackWords.slice(0, limit);
    }

    // Clear cache
    clearCache() {
        this.cache.clear();
        console.log('üìö Cache cleared');
    }

    // Get cache status
    getCacheStatus() {
        return {
            size: this.cache.size,
            entries: Array.from(this.cache.keys())
        };
    }
}

// Create global instance
console.log('üìö Creating GameDataManager instance...');

// Wait for Firebase to be ready before creating GameDataManager
function createGameDataManager() {
    if (window.firebaseConfig && window.firebaseDb) {
        window.GameDataManager = new FirestoreGameDataManager();
        // Initialize the manager
        window.GameDataManager.initialize().then(initialized => {
            if (initialized) {
                console.log('‚úÖ GameDataManager created and initialized with Firebase');
            } else {
                console.log('‚úÖ GameDataManager created with fallback mode');
            }
        });
    } else {
        console.log('‚è≥ Waiting for Firebase to be ready...');
        setTimeout(createGameDataManager, 100);
    }
}

createGameDataManager();